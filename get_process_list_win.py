import win32pdh
import string
import win32api
import win32con
import win32process
import win32security

def procids():
    junk, instances = win32pdh.EnumObjectItems(None,None,'process', win32pdh.PERF_DETAIL_WIZARD)
    proc_ids=[]
    proc_dict={}
    for instance in instances:
        if instance in proc_dict:
            proc_dict[instance] = proc_dict[instance] + 1
        else:
            proc_dict[instance]=0
    for instance, max_instances in proc_dict.items():
        for inum in xrange(max_instances+1):
            hq = win32pdh.OpenQuery() # initializes the query handle 
            path = win32pdh.MakeCounterPath( (None,'process',instance, None, inum,'ID Process') )
            counter_handle=win32pdh.AddCounter(hq, path) 
            win32pdh.CollectQueryData(hq) #collects data for the counter 
            type, val = win32pdh.GetFormattedCounterValue(counter_handle, win32pdh.PDH_FMT_LONG)
            proc_ids.append((instance,str(val)))
            win32pdh.CloseQuery(hq) 

	seen = set()
	seen_add = seen.add
    proc_ids.sort()
    return [ x for x in proc_ids if x not in seen and not seen_add(x)]

    
if __name__ == "__main__":
    priv_flags = win32security.TOKEN_ADJUST_PRIVILEGES | win32security.TOKEN_QUERY
    hToken = win32security.OpenProcessToken(win32api.GetCurrentProcess(), priv_flags)
    # enable "debug process"
    privilege_id = win32security.LookupPrivilegeValue (None,win32security.SE_DEBUG_NAME)
    old_privs = win32security.AdjustTokenPrivileges (hToken, 0,[(privilege_id, win32security.SE_PRIVILEGE_ENABLED)])

    _result = []	
    for proc in procids():
        #print proc[1]
        # 0 -> SYSTEM IDLE
        # 4 -> SYSTEM PROCESS
       
        try:
            pshandle = win32api.OpenProcess(win32con.PROCESS_QUERY_INFORMATION | win32con.PROCESS_VM_READ, False, int(proc[1]))
            exename = win32process.GetModuleFileNameEx(pshandle, 0)
            _result.append(exename)
			# clean up
            win32api.CloseHandle(pshandle) 
        except:
            pass			
    win32api.CloseHandle(hToken)	
    result = set() 
