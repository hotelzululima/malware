#!/usr/bin/python

try:
        import os
        import sys
        import time
        import argparse
        import hashlib
        import urllib
        import urllib2
        import simplejson
except ImportError,e:
        import sys
        sys.stdout.write("%s\n" %e)
        sys.exit(1)


class Malinux:

        def __init__(self):

                self.proc_dir = "/proc"
                try:
                        self.pids = [pid for pid in os.listdir(self.proc_dir) if pid.isdigit()]
                except Exception, err:
                        print >> sys.stderr, "%s"% str(err)
                        sys.exit(1)

                self.proc_md5 = {}


        def create_md5(self):

                for pid in self.pids:
                        try:
                                full_proc_name = os.path.realpath("%s/%s/exe"% (self.proc_dir, pid))
                                if not full_proc_name in self.proc_md5.keys():
                                        self.proc_md5[full_proc_name] = ""
                        except:
                                pass

                for proc in self.proc_md5.keys():
                        self.proc_md5[proc] = hashlib.md5(proc).hexdigest()

                if self.proc_md5:
                        return self.proc_md5
                else:
                        return None


class VirusTotal:

        def __init__(self):

                self.url = "https://www.virustotal.com/vtapi/v2/file/report"
                self.malinux = Malinux()


        def send_virustotal(self, md5):

                parameters = {"resource": "%s"% (md5), "apikey": "b17ccf68041c2053cd8d210e315a2a1bead119ba3e9592a2304fd4157d6dfa82"}

                try:
                        data = urllib.urlencode(parameters)
                        req = urllib2.Request(self.url, data)
                        response = urllib2.urlopen(req)
                        json = response.read()

                        response_dict = simplejson.loads(json)
                        return response_dict
                except:
                        return None


        def run(self):

                result = self.malinux.create_md5()
                if result is not None:
                        for proc in result.keys():
                                md5 = result[proc]
                                print proc + "," + md5

                                response_dict = self.send_virustotal("69630e4574ec6798239b091cda43dca0")
                                for vendor,result in response_dict.get('scans', {}).iteritems():
                                        if result.get('detected'):
                                                print vendor, result
                                sys.exit(1)
                                #time.sleep(15)
##
### Go galkan go go go ...
##

if __name__ == "__main__":
        virustotal = VirusTotal()
        virustotal.run()
